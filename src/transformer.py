"""
This file contains the definitions for the Transformer class as well as its child
classes. 
"""
import os
import json
import pandas as pd

from abc import abstractmethod
from pandas import DataFrame
from src.config import config


class Transformer:
    """
        A Transformer processes a JSON file and transforms 
        them into CSV format.

        Attributes
        ----------

        Methods
        ----------
    """
    
    def __init__(self) -> None:
        """
            Instantiates a Transformer object.

            Parameters:
            ----------
            None
        """

    def run(self) -> None:
        """
            Processes raw data files, transforms according to requirements, and
            saves the output as CSV files.
        """
        df = self.load_data()
        transformed_df = self.transform(df)
        self.save(transformed_df)

    @abstractmethod
    def load_data(self) -> DataFrame:
        """
            Loads the raw data file generated by Scraper and generates a DataFrame.
        """
        with open(os.path.join(config['RAW_DIRECTORY'], 'data.json'), 'r') as f:
            df = pd.DataFrame(json.load(f))

        return df

    @abstractmethod
    def transform(self, df: DataFrame) -> DataFrame:
        """
            Consumes the original DataFrame and transforms it to the desired
            output.

            Parameters:
            ----------
            df : DataFrame
                A DataFrame of the raw data

            Returns:
            ----------
            DataFrame
        """
        temp = df.apply(lambda row: row[df['Rating'].isin(['Four','Five'])])
        temp[['_', '_Price']] = temp['Price (incl. tax)'].str.split('Â£', expand=True, regex=True)

        result = temp[temp['_Price'].astype(float) < 20].copy().drop(['_', '_Price'], axis=1)
        print(f'[INFO] : Before (Rating) {len(df)} | After (Rating) {len(temp)} || Before (Price with Tax) {len(temp)} | After (Prict with Tax) {len(result)}')
        # print(result.head())
        return result

    def save(self, dataframe: DataFrame) -> None:
        """
            Saves the transformed data as CSV file under the data/transformed/
            directory.

            Parameters:
            ----------
            dataframe : DataFrame
                The transformed DataFrame
        """
        dataframe.to_csv('{}/result.csv'.format(config['TRANSFORMED_DIRECTORY']), index=False)


class BookTransformer(Transformer):
    """
        A BookTransformer is a child of Transformer that transforms the JSON
        data extracted by BookScraper and converts it to CSV.
    """